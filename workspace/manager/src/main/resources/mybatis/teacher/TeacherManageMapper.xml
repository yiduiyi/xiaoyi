<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaoyi.teacher.dao.ITeachingRecordDao">

	<resultMap id="BaseResultMap" type="com.xiaoyi.teacher.domain.TeachingRecord">
		<id column="recordId" property="recordid" jdbcType="VARCHAR" />
		<result column="teachingId" property="teachingid" jdbcType="VARCHAR" />
		<result column="orderId" property="orderid" jdbcType="VARCHAR" />
		<result column="teacherId" property="teacherid" jdbcType="VARCHAR" />
		<result column="startTime" property="starttime" jdbcType="TIME" />
		<result column="endTime" property="endtime" jdbcType="TIME" />
		<result column="teachingNum" property="teachingnum"  />
		<result column="teachingDate" property="teachingdate" jdbcType="DATE" />
		<result column="lessonTradeId" property="lessonTradeId" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		recordId, teachingId, orderId, teacherId, startTime, endTime, teachingNum,
		teachingDate,lessonTradeId
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from teachingrecord
		where recordId = #{recordid,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from teachingrecord
		where recordId = #{recordid,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.xiaoyi.teacher.domain.TeachingRecord">
		insert into teachingrecord (recordId, teachingId, orderId,
		teacherId, startTime, endTime,
		teachingNum, teachingDate,lessonTradeId)
		values (#{recordid,jdbcType=VARCHAR}, #{teachingid,jdbcType=VARCHAR},
		#{orderid,jdbcType=VARCHAR},
		#{teacherid,jdbcType=VARCHAR}, #{starttime,jdbcType=TIME}, #{endtime,jdbcType=TIME},
		#{teachingnum}, #{teachingdate,jdbcType=DATE},#{lessonTradeId,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.xiaoyi.teacher.domain.TeachingRecord">
		insert into teachingrecord
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="recordid != null">
				recordId,
			</if>
			<if test="teachingid != null">
				teachingId,
			</if>
			<if test="orderid != null">
				orderId,
			</if>
			<if test="teacherid != null">
				teacherId,
			</if>
			<if test="starttime != null">
				startTime,
			</if>
			<if test="endtime != null">
				endTime,
			</if>
			<if test="teachingnum != null">
				teachingNum,
			</if>
			<if test="teachingdate != null">
				teachingDate,
			</if>
			<if test="lessonTradeId != null">
				lessonTradeId,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="recordid != null">
				#{recordid,jdbcType=VARCHAR},
			</if>
			<if test="teachingid != null">
				#{teachingid,jdbcType=VARCHAR},
			</if>
			<if test="orderid != null">
				#{orderid,jdbcType=VARCHAR},
			</if>
			<if test="teacherid != null">
				#{teacherid,jdbcType=VARCHAR},
			</if>
			<if test="starttime != null">
				#{starttime,jdbcType=TIME},
			</if>
			<if test="endtime != null">
				#{endtime,jdbcType=TIME},
			</if>
			<if test="teachingnum != null">
				#{teachingnum},
			</if>
			<if test="teachingdate != null">
				#{teachingdate,jdbcType=DATE},
			</if>
			<if test="lessonTradeId != null">
				#{lessonTradeId},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.xiaoyi.teacher.domain.TeachingRecord">
		update teachingrecord
		<set>
			<if test="teachingid != null">
				teachingId = #{teachingid,jdbcType=VARCHAR},
			</if>
			<if test="orderid != null">
				orderId = #{orderid,jdbcType=VARCHAR},
			</if>
			<if test="teacherid != null">
				teacherId = #{teacherid,jdbcType=VARCHAR},
			</if>
			<if test="starttime != null">
				startTime = #{starttime,jdbcType=TIME},
			</if>
			<if test="endtime != null">
				endTime = #{endtime,jdbcType=TIME},
			</if>
			<if test="teachingnum != null">
				teachingNum = #{teachingnum},
			</if>
			<if test="teachingdate != null">
				teachingDate = #{teachingdate,jdbcType=DATE},
			</if>
			<if test="lessonTradeId != null">
				lessonTradeId = #{lessonTradeId},
			</if>
		</set>
		where recordId = #{recordid,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.xiaoyi.teacher.domain.TeachingRecord">
		update teachingrecord
		set teachingId = #{teachingid,jdbcType=VARCHAR},
		orderId = #{orderid,jdbcType=VARCHAR},
		teacherId = #{teacherid,jdbcType=VARCHAR},
		startTime = #{starttime,jdbcType=TIME},
		endTime = #{endtime,jdbcType=TIME},
		teachingNum = #{teachingnum},
		teachingDate = #{teachingdate,jdbcType=DATE},
		lessonTradeId = #{lessonTradeId}
		where recordId = #{recordid,jdbcType=VARCHAR}
	</update>
	
	
	<!-- 查询老师对应的订单 -->
	<select id="selectRecordsByTid" resultType="com.alibaba.fastjson.JSONObject"
		parameterType="java.lang.String">
		SELECT a.purchaseTime,a.orderId,a.parentId,a.memberId,b.teacherId,a.lessonType AS gradeId,
		a.lessonType,b.teachingId,a.totalLessonNum,a.lessonLeftNum,c.parentName,c.telNum,d.name
		as studentName
		FROM ordersum a
		left JOIN order_teaching_r b ON a.orderId = b.orderId
		left JOIN parents c ON a.parentId=c.parentId
		left JOIN student d ON a.memberId = d.memberId
		WHERE
		b.teacherId=#{teacherId}
		GROUP BY b.orderId<!-- b.teachingId --><!-- parentId,memberId,gradeId -->
	</select>
	
	<!-- 插入提现课时记录 -->
	<insert id="insertTeachingRecords" parameterType="java.util.List">
		INSERT INTO teachingrecord(recordId, teachingId, orderId,
			teacherId, startTime, endTime,
			teachingNum, teachingDate,lessonTradeId,feedback)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.recordid},#{item.teachingid},#{item.orderid},#{item.teacherid},
				#{item.starttime},#{item.endtime},#{item.teachingnum}
				,#{item.teachingdate},#{item.lessonTradeId},#{item.feedback})
		</foreach>
		ON DUPLICATE KEY UPDATE recordId=VALUES(recordId), lessonTradeId=VALUES(lessonTradeId)
	</insert>
	
	<!-- 查询老师提现记录 -->
	<select id="selectLSRecordByParams" parameterType="hashmap" 
			resultType="com.alibaba.fastjson.JSONObject">
		SELECT b.parentName,a.`status`, b.telNum,c.`name` as studentName,a.notes,a.lessonType,a.feedback
			,a.applyLessons,a.frozenLessons <!-- a.applyLessons-a.frozenLessons AS actualIncome -->
		FROM lessontrade a LEFT JOIN parents b ON a.parentId=b.parentId 
			LEFT JOIN student c ON a.memberId= c.memberId
		WHERE a.teacherId=#{teacherId}
		<if test="null!=applyDate">		
			AND date_format(applyTime,'%Y%c')=#{applyDate}
		</if>
	</select>
	
	<!-- 查询h5老师课时记录 -->
	<select id="selectLessonTradeByTeacherId" parameterType="java.lang.String"
			resultType="com.alibaba.fastjson.JSONObject">
		SELECT a.*,b.parentName
		FROM lessontrade a left join parents b
			on a.parentId = b.parentId
		WHERE teacherId=#{teacherId} AND (a.status=2 OR a.status=3)
	</select>
	
	<!-- 查询老师当月提现记录 -->
	<select id="selectTeacherLessonTradeByParams" parameterType="hashmap"
		resultType="com.xiaoyi.teacher.domain.LessonTrade">
		SELECT * 
		FROM `lessontrade`
		WHERE teacherId=#{teacherId} <!-- AND parentId=#{parentId} -->
			AND memberId=#{memberId} AND lessonType=#{lessonType}
			<if test="queryDates!=null and queryDates.size>0">
				AND DATE_FORMAT(applyTime,'%Y%m') in
				<foreach collection="queryDates" item="item" open="(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
			<!-- = #{queryDate}; -->
	</select>
	
	<!-- 查询老师微信端提交的课时记录 -->
	<select id="selectByParams" parameterType="com.alibaba.fastjson.JSONObject"
		resultMap="BaseResultMap">
		SELECT * FROM teachingrecord
		<where>
			<if test="orderId!=null">
				orderId=#{orderId}
			</if>
			<if test="teacherId!=null">
				AND teacherId=#{teacherId}
			</if>
			<if test="teachingId!=null">
				AND teachingId=#{teachingId}
			</if>
			<if test="queryMonth!=null">
				AND DATE_FORMAT(teachingDate,"%Y-%m")=#{queryMonth};
			</if>
		</where>
	</select>
</mapper>